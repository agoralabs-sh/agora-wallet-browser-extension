{"version":3,"file":"931.js","mappings":"4MAAA,MAAMA,UAAsBC,MACxBC,KACAC,KACA,WAAAC,CAAYC,EAASH,EAAMC,GACvBG,MAAMD,GACNE,KAAKC,KAAO,gBACZD,KAAKL,KAAOA,EACZK,KAAKJ,KAAOA,CAChB,EAEJ,MAAMM,EAAW,mBACXC,EAAS,wCACf,MAAMC,EACFC,SACA,WAAAR,CAAYQ,GACRL,KAAKK,SAAWA,CACpB,CACA,OAAAC,CAAQC,GACJ,OAAO,IAAIC,SAAQ,CAACC,EAASC,KACzB,MAAMC,EAAMC,KAAK,GAAGV,YAAoBF,KAAKK,SAAUF,GACvDU,OAAOC,iBAAiB,WACxB,SAASC,EAAeC,GACpB,GAAIA,EAAMC,SAAWf,EAIrB,OAFIc,EAAMpB,KAAKsB,OACXC,QAAQC,IAAI,eAAgBJ,EAAMpB,MAC9BoB,EAAMpB,KAAKyB,QACf,IAAK,QAAS,CACV,MAAMvB,EAAU,CACZuB,OAAQ,UACRC,UAAWf,GAEfI,GAAKY,YAAYzB,EAAS,KAC1B,KACJ,CACA,IAAK,UACDa,GAAKa,QACLX,OAAOY,oBAAoB,UAAWV,GACtCN,EAAQO,EAAMpB,KAAK8B,OACnB,MAEJ,IAAK,QACDf,GAAKa,QACLX,OAAOY,oBAAoB,UAAWV,GACtCL,EAAO,IAAIhB,MAAMsB,EAAMpB,KAAKE,UAC5B,MAEJ,IAAK,QACIa,GAAKgB,SACNd,OAAOY,oBAAoB,UAAWV,GACtCL,EAAO,IAAIhB,MAAM,yBAKjC,MAER,CACA,QAAAkC,CAASC,GACL,OAAO,IAAIrB,SAAQ,CAACC,EAASC,KACpBmB,EAAKC,QACNpB,EAAO,IAAIjB,EAAc,0BAA2B,OAExD,MAAMkB,EAAMC,KAAK,GAAGV,SAAiBF,KAAKK,SAAUF,GACpDU,OAAOC,iBAAiB,WACxB,SAASC,EAAeC,GACpB,GAAIA,EAAMC,SAAWf,EAIrB,OAFIc,EAAMpB,KAAKsB,OACXC,QAAQC,IAAI,eAAgBJ,EAAMpB,MAC9BoB,EAAMpB,KAAKyB,QACf,IAAK,QAAS,CACV,MAAMvB,EAAU,CACZuB,OAAQ,OACRQ,KAAMA,GAEVlB,GAAKY,YAAYzB,EAAS,KAC1B,KACJ,CACA,IAAK,SACDa,GAAKa,QACLX,OAAOY,oBAAoB,UAAWV,GACtCN,EAAQO,EAAMpB,KAAKiC,MACnB,MAEJ,IAAK,QACDlB,GAAKa,QACLX,OAAOY,oBAAoB,UAAWV,GACtCL,EAAO,IAAIjB,EAAcuB,EAAMpB,KAAKE,QAASkB,EAAMpB,KAAKD,MAAQ,OAChE,MAEJ,IAAK,QACIgB,GAAKgB,SACNd,OAAOY,oBAAoB,UAAWV,GACtCL,EAAO,IAAIjB,EAAc,wBAAyB,QAKlE,MAER,E","sources":["webpack://@agoralabs-sh/kibisis-web-extension/./node_modules/lute-connect/dist/main.esm.js"],"sourcesContent":["class SignTxnsError extends Error {\n    code;\n    data;\n    constructor(message, code, data) {\n        super(message);\n        this.name = 'SignTxnsError';\n        this.code = code;\n        this.data = data;\n    }\n}\nconst BASE_URL = \"https://lute.app\";\nconst PARAMS = \"width=500,height=750,left=100,top=100\";\nclass LuteConnect {\n    siteName;\n    constructor(siteName) {\n        this.siteName = siteName;\n    }\n    connect(genesisId) {\n        return new Promise((resolve, reject) => {\n            const win = open(`${BASE_URL}/connect`, this.siteName, PARAMS);\n            window.addEventListener(\"message\", messageHandler);\n            function messageHandler(event) {\n                if (event.origin !== BASE_URL)\n                    return;\n                if (event.data.debug)\n                    console.log(\"[Lute Debug]\", event.data);\n                switch (event.data.action) {\n                    case \"ready\": {\n                        const message = {\n                            action: \"network\",\n                            genesisID: genesisId,\n                        };\n                        win?.postMessage(message, \"*\");\n                        break;\n                    }\n                    case \"connect\": {\n                        win?.close();\n                        window.removeEventListener(\"message\", messageHandler);\n                        resolve(event.data.addrs);\n                        break;\n                    }\n                    case \"error\": {\n                        win?.close();\n                        window.removeEventListener(\"message\", messageHandler);\n                        reject(new Error(event.data.message));\n                        break;\n                    }\n                    case \"close\": {\n                        if (!win?.closed) {\n                            window.removeEventListener(\"message\", messageHandler);\n                            reject(new Error(\"Operation Cancelled\"));\n                        }\n                        break;\n                    }\n                }\n            }\n        });\n    }\n    signTxns(txns) {\n        return new Promise((resolve, reject) => {\n            if (!txns.length) {\n                reject(new SignTxnsError(\"Empty Transaction Array\", 4300));\n            }\n            const win = open(`${BASE_URL}/sign`, this.siteName, PARAMS);\n            window.addEventListener(\"message\", messageHandler);\n            function messageHandler(event) {\n                if (event.origin !== BASE_URL)\n                    return;\n                if (event.data.debug)\n                    console.log(\"[Lute Debug]\", event.data);\n                switch (event.data.action) {\n                    case \"ready\": {\n                        const message = {\n                            action: \"sign\",\n                            txns: txns,\n                        };\n                        win?.postMessage(message, \"*\");\n                        break;\n                    }\n                    case \"signed\": {\n                        win?.close();\n                        window.removeEventListener(\"message\", messageHandler);\n                        resolve(event.data.txns);\n                        break;\n                    }\n                    case \"error\": {\n                        win?.close();\n                        window.removeEventListener(\"message\", messageHandler);\n                        reject(new SignTxnsError(event.data.message, event.data.code || 4300));\n                        break;\n                    }\n                    case \"close\": {\n                        if (!win?.closed) {\n                            window.removeEventListener(\"message\", messageHandler);\n                            reject(new SignTxnsError(\"User Rejected Request\", 4100));\n                        }\n                        break;\n                    }\n                }\n            }\n        });\n    }\n}\n\nexport { SignTxnsError, LuteConnect as default };\n"],"names":["SignTxnsError","Error","code","data","constructor","message","super","this","name","BASE_URL","PARAMS","LuteConnect","siteName","connect","genesisId","Promise","resolve","reject","win","open","window","addEventListener","messageHandler","event","origin","debug","console","log","action","genesisID","postMessage","close","removeEventListener","addrs","closed","signTxns","txns","length"],"sourceRoot":""}